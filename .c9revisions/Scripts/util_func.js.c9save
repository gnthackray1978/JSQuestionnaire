{"ts":1357250431075,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var FB;\n\n// *** END OF CUSTOMISABLE SECTION ***\nfunction almostEqual(double1, double2, precision) {\n    return (Math.abs(double1 - double2) <= precision);\n}\n\n\n\n// UTIL CLASS\n//\n\n\nvar AncUtils = function () {    \n    this.localfb= FB;\n};\n\n\nAncUtils.prototype = {\n\n    pad: function (number, length) {\n\n        var str = '' + number;\n        while (str.length < length) {\n            str = '0' + str;\n        }\n\n        return str;\n\n    },\n\n    convertToCSV: function (array) {\n        var csvStr = '';\n\n        $.each(array, function (intIdx, objVal) {\n            if (intIdx == 0)\n                csvStr += objVal;\n            else\n                csvStr += ',' + objVal;\n        })\n\n        return csvStr;\n    },\n\n    sort_inner: function (sort_col, param_name) {\n\n        var col_name = 'sort_col';\n\n        if (param_name != undefined && param_name != '')\n            col_name = param_name;\n\n        var existing_col = this.getParameterByName(col_name);\n\n        if (existing_col) {\n\n            if (existing_col.indexOf(sort_col) >= 0) {\n                if (existing_col.indexOf('DESC') < 0) {\n                    sort_col += ' DESC';\n                }\n            }\n        }\n\n        this.updateQryPar(col_name, sort_col);\n    },\n\n    handleSelection: function (evt, selection, bodytag, id) {\n\n\n        if (evt != undefined) {\n            var arIdx = jQuery.inArray(evt, selection);\n\n            if (arIdx == -1) {\n                selection.push(evt);\n            }\n            else {\n                selection.splice(arIdx, 1);\n            }\n        }\n\n\n        $(bodytag).each(function () {\n            $this = $(this)\n\n            var quantity = $this.find(id).val();\n            arIdx = jQuery.inArray(quantity, selection);\n\n            if (arIdx == -1) {\n                $this.removeClass('highLightRow');\n            }\n            else {\n                $this.addClass('highLightRow');\n            }\n        }); //end each\n\n\n\n\n        return selection;\n    },\n\n    addlinks: function (dupeEvents, func, context) {\n        for (var i = 0; i < dupeEvents.length; i++) {\n\n            $(\"#\" + dupeEvents[i].key).die(\"click\");\n\n            //console.log('creating event for : ' + dupeEvents[i].key);\n\n            var somecrap = function (idx, val) {\n                //probably not efficient to do this multiple times\n                //this can be a future optimization.\n\n\n                $(\"#\" + dupeEvents[idx].key).live(\"click\", $.proxy(function () {\n                    var va = val;\n\n                    //console.log('clicked with : ' + va);\n\n                    if (va !== null)\n                        func.call(context, va);\n                    else\n                        func.call(context);\n\n                    return false;\n                }, context));\n\n            };\n\n            somecrap(i, dupeEvents[i].value);\n\n        }\n\n    },\n\n    getHost: function () {\n        if (window.location.hostname.indexOf(\"local\") == -1)\n            return 'http://www.gnthackray.net'\n        else\n            return 'http://local.gnthackray.net:666';\n    },\n\n    // gets json set\n    twaGetJSON: function (url, paramsArg, methodArg, fbArg) {\n        var aburl = this.getHost() + url;\n        $.ajaxSetup({ cache: false });\n\n        $.ajax({\n            url: aburl,\n            dataType: \"jsonp\",\n            data: paramsArg,\n            success: methodArg,\n            beforeSend: $.proxy(this.addFBToHeader(), this)\n        });\n    },\n\n    //ANCUTILS\n    twaPostJSON: function (postParams) {\n\n        //        var postParams = { url: '',\n        //            data: data.Batch,\n        //            idparam: data.BatchLength,\n        //            refreshmethod: data.Total,\n        //            refreshArgs: this.getLink,\n        //            Context: this\n        //        };\n\n        var localurl = this.getHost() + postParams.url;\n\n        var stringy = JSON.stringify(postParams.data);\n\n        var that = this;\n\n        var successFunc = function (message) {\n            // was there a error\n            var error = that.getValueFromKey(message, 'Error');\n\n            if (error != '' && error != null) {\n                //yes\n                that.showError(error);\n            }\n            else {\n                //everything was fine - supposedly.\n                if (postParams.idparam != undefined) {\n                    var result = that.getValueFromKey(message, 'Id'); // make this Id value less arbitary\n                    var qutils = new QryStrUtils();\n                    qutils.updateQryPar(postParams.idparam, result);\n                }\n                if (postParams.refreshmethod != undefined) {\n\n                    if (postParams.refreshArgs != undefined) {\n                        if (postParams.refreshArgs.data != undefined)\n                            postParams.refreshArgs.data = message;\n                    }\n\n                    postParams.refreshmethod.call(postParams.Context, postParams.refreshArgs);\n                }\n            }\n        };\n\n        $.ajax({\n            cache: false,\n            type: \"POST\",\n            async: false,\n            url: localurl,\n            data: stringy,\n            contentType: \"application/json\",\n            dataType: \"json\",\n            beforeSend: $.proxy(this.addFBToHeader(), this),\n            success: successFunc\n        });\n\n    },\n\n    getValueFromKey: function (qry, name) {\n        var match = RegExp(name + '=([^&]*)')\n                    .exec(qry);\n        return match && decodeURIComponent(match[1].replace(/\\+/g, ' '));\n    },\n\n    showError: function (error) {\n        if (error != '' && error != null) {\n            $('#errorDialog').html(error);\n            $(\"#errorDialog\").dialog();\n        }\n    },\n\n    //beforeSend: function (xhr) { passToProxy(xhr, url); }\n    // sets facebook token to request header\n    addFBToHeader: function () {\n        return function (xhr) {\n            var access_token = '';\n            if (this.localfb != null) {\n                if (this.localfb.getAuthResponse() != null)\n                    access_token = this.localfb.getAuthResponse()['accessToken'];\n            }\n            xhr.setRequestHeader('fb', access_token);\n        }\n    },\n\n    //ParentElement: $('#pager'),\n    //Batch: data.Batch,\n    //BatchLength: data.BatchLength,\n    //Total: data.Total,\n    //Function: this.getLink,\n    //Context: this\n    createpager: function (pagerparams) {\n\n        var clickEvents = new Array();\n\n        //   dupeEvents.push({ key: '#d' + _idx, value: sourceInfo.XREF });\n\n\n        var blocksize = 5;\n\n        var remainderPages = pagerparams.Total % pagerparams.BatchLength;\n        var totalRequiredPages = (pagerparams.Total - remainderPages) / pagerparams.BatchLength;\n\n        if (remainderPages > 0)\n            totalRequiredPages++;\n\n        var pagerBody = '';\n\n        if (totalRequiredPages <= blocksize) {\n            var idx0 = 0;\n\n            while (idx0 < totalRequiredPages) {\n\n                pagerBody += \"<a id='cp_\" + idx0 + \"' href='' class = 'pagerlink'>\" + String(idx0 + 1) + \"</a>\";\n                clickEvents.push({ key: 'cp_' + idx0, value: idx0 });\n                idx0++;\n            }\n        }\n        else {\n            var startpage = pagerparams.Batch - (pagerparams.Batch % blocksize);\n            var limit = 0;\n\n            if ((startpage + blocksize) > totalRequiredPages) {\n\n                limit = totalRequiredPages;\n            }\n            else {\n                limit = startpage + blocksize;\n\n            }\n\n            //   alert(startpage + ' ' + limit);\n\n\n            if (startpage >= blocksize) {\n                pagerBody += \"<a id='cp_0' href='' class = 'pagerlink'>First</a>\";\n                clickEvents.push({ key: 'cp_0', value: 0 });\n\n                // work out how far back to move the pager when the '..' is clicked.\n                // if we are at the end of the record and there is only a few pages available\n                // then the .. should be moved back to the start of block of pages boundary \n                // eg 01234 56789 1011121314 the block boundaries would be 0 5 and 10\n\n                var countPagesAvailable = (limit - startpage);\n\n                var linkPage = (startpage - blocksize);\n\n                pagerBody += \"<a id='cp_\" + linkPage + \"' href='' class = 'pagerlink'>..</a>\";\n\n                clickEvents.push({ key: 'cp_' + linkPage, value: linkPage });\n            }\n\n            var idx = startpage;\n            while (idx < limit) {\n                if (idx == pagerparams.Batch) {\n                    pagerBody += \"<a id='cp_\" + idx + \"' href='' class = 'pagerlink_selected'>\" + String(idx + 1) + \"</a>\";\n                    clickEvents.push({ key: 'cp_' + idx, value: idx });\n                }\n                else {\n                    pagerBody += \"<a id='cp_\" + idx + \"' href='' class = 'pagerlink' >\" + String(idx + 1) + \"</a>\";\n                    clickEvents.push({ key: 'cp_' + idx, value: idx });\n                }\n                idx++;\n            }\n\n\n            if (idx < totalRequiredPages) {\n\n                var remainderAvailablePages = totalRequiredPages % blocksize;\n                //zero based\n\n                startpage += blocksize;\n                startpage++;\n\n                pagerBody += \"<a id='cp_\" + startpage + \"' href='' class = 'pagerlink'>..</a>\";\n                clickEvents.push({ key: 'cp_' + startpage, value: startpage });\n\n                pagerBody += \"<a id='cp_\" + (totalRequiredPages - remainderAvailablePages) + \"' href='' class = 'pagerlink'>Last</a>\";\n                clickEvents.push({ key: 'cp_' + (totalRequiredPages - remainderAvailablePages), value: (totalRequiredPages - remainderAvailablePages) });\n\n            }\n        }\n\n        // set pager html\n        $('#' + pagerparams.ParentElement).html(pagerBody);\n\n        // add click events\n        this.addlinks(clickEvents, pagerparams.Function, pagerparams.Context);\n    }\n};\n\n\n\n\n\n\nvar QryStrUtils = function () { }\n\n\nQryStrUtils.prototype = {\n\n    makeIdQryString: function (paramName, path) {\n\n        var _loc = window.location.hash;\n\n        var idParam = this.getParameterByName(paramName);\n\n        if (idParam == null) {\n            if (_loc == '') {\n                _loc += paramName + '=' + path;\n            }\n            else {\n                _loc += '&' + paramName + '=' + path;\n            }\n        }\n        else {\n            idParam = paramName + '=' + idParam;\n            _loc = _loc.replace(idParam, paramName + '=' + path);\n        }\n\n        if (_loc.indexOf('?') < 0) {\n            _loc = '?' + _loc;\n        }\n\n        return _loc;\n    },\n\n    updateQry: function (args) {\n        // var myJSONObject = { \"ircEvent\": \"PRIVMSG\", \"method\": \"newURI\", \"regex\": \"^http://.*\" };\n\n        var workingQry = window.location.hash;\n\n        for (var prop in args) {\n\n            //             if ($.type(args[prop]) == \"string\")\n            //                workingQry = this.updateStrForQry(workingQry, prop, args[prop]);\n            //             else\n            //                workingQry = this.updateStrForQry(workingQry, prop, args[prop].val());\n\n\n            switch ($.type(args[prop])) {\n                case \"string\":\n                    workingQry = this.updateStrForQry(workingQry, prop, args[prop]);\n                    break;\n                case \"boolean\":\n                    workingQry = this.updateStrForQry(workingQry, prop, args[prop]);\n                    break;\n                default:\n                    workingQry = this.updateStrForQry(workingQry, prop, args[prop].val());\n            }\n\n\n        }\n\n        window.location.hash = workingQry;\n    },\n\n    updateQryPar: function (parname, parval) {\n        var qry = window.location.hash;\n        // parameters always should be followed by = \n        // checking for this avoids screw ups where for example id is in the middle of another \n        // param name like fids\n        if (qry.indexOf(parname+'=') < 0) {\n            if (qry.indexOf('?') < 0) {\n                qry = '?' + parname + '=' + parval;\n                window.location.hash = qry;\n            }\n            else {\n                qry += '&' + parname + '=' + parval;\n                window.location.replace(qry);\n            }\n        }\n        else {\n            var oldVal = this.getParameterByName(parname, '');\n            var pageQry = parname + '=' + oldVal;\n            var replaceQry = parname + '=' + parval;\n            qry = qry.replace(pageQry, replaceQry);\n            window.location.replace(qry);\n        }\n    },\n\n    //update parameters in a string NOT the address bar\n    updateStrForQry: function (qry, parname, parval) {\n        //parameter not found in string\n        if (qry.indexOf('?' + parname) < 0 && qry.indexOf('&' + parname) < 0) {\n            if (qry.indexOf('?') < 0) {\n                // the query string is completely empty\n                qry = '?' + parname + '=' + parval;\n            }\n            else {\n                // so tack it on the end\n                qry += '&' + parname + '=' + parval;\n            }\n        }\n        else {\n            var oldVal = this.getParameterByNameFromString(qry, parname);\n\n            if (!oldVal) oldVal = '';\n\n            var pageQry = parname + '=' + oldVal;\n            var replaceQry = parname + '=' + parval;\n            qry = qry.replace(pageQry, replaceQry);\n        }\n        return qry;\n    },\n\n    //get parameter specify defvalue if you want a default value if it doesnt exist\n    getParameterByName: function (name, defvalue) {\n        var match = RegExp('[?&]' + name + '=([^&]*)')\n                        .exec(window.location.href);\n \n        if (defvalue != undefined && defvalue != null) {\n            if (match != null)\n                return match && decodeURIComponent(match[1].replace(/\\+/g, ' '));\n            else\n                return defvalue;\n        } else {\n            return match && decodeURIComponent(match[1].replace(/\\+/g, ' '));\n        }\n\n    },\n\n    getParameterByNameFromString: function (qry, name) {\n        var match = RegExp('[?&]' + name + '=([^&]*)')\n                        .exec(qry);\n        return match && decodeURIComponent(match[1].replace(/\\+/g, ' '));\n    }\n\n\n\n}\n\n\n\n\n\n"]],"start1":0,"start2":0,"length1":0,"length2":14213}]],"length":14213}
{"contributors":[],"silentsave":false,"ts":1357250520466,"patch":[[{"diffs":[[0,": function () {\n"],[1,"        \n"],[0,"        if (wind"]],"start1":2868,"start2":2868,"length1":32,"length2":41},{"diffs":[[0," == -1)\n"],[1,"        {\n            \n        }\n        else\n        {\n            if (window.location.hostname.indexOf(\"local\") == -1)\n    "],[0,"        "]],"start1":2946,"start2":2946,"length1":16,"length2":141},{"diffs":[[0,"ray.net'"],[-1,"\n"],[1,";\n "],[0,"        "],[1,"   "],[0,"else\n"],[1,"    "],[0,"        "]],"start1":3117,"start2":3117,"length1":30,"length2":39},{"diffs":[[0,"t:666';\n"],[1,"        }\n            \n"],[0,"    },\n\n"]],"start1":3194,"start2":3194,"length1":16,"length2":39}]],"length":14379,"saved":false}
{"ts":1357250546515,"patch":[[{"diffs":[[0,"me.indexOf(\""],[-1,"local\") == -1"],[1,"c9.io\") >= 0"],[0,")\n        {\n"]],"start1":2927,"start2":2927,"length1":37,"length2":36}]],"length":14378,"saved":false}
{"ts":1357250564233,"patch":[[{"diffs":[[0,"  {\n            "],[1,"return 'https://c9.io/gnthackray1978/jsquestionnaire/workspace/';"],[0,"\n        }\n     "]],"start1":2959,"start2":2959,"length1":32,"length2":97}]],"length":14443,"saved":false}
{"ts":1357250592317,"patch":[[{"diffs":[[0,"orkspace"],[-1,"/"],[0,"';\n     "]],"start1":3029,"start2":3029,"length1":17,"length2":16}]],"length":14442,"saved":false}
